/* testTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. testTokenManager.java */
package finalProject;
import Nodes.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class testTokenManager implements testConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 13;
            return -1;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 39;
            return 92;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 39;
            return 58;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 39;
            return 85;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 39;
            return 28;
         }
         if ((active0 & 0x200L) != 0L)
            return 31;
         if ((active0 & 0x100200000L) != 0L)
         {
            jjmatchedKind = 39;
            return 18;
         }
         if ((active0 & 0x100d0000000L) != 0L)
         {
            jjmatchedKind = 39;
            return 101;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 39;
            return 22;
         }
         if ((active0 & 0x400000000L) != 0L)
            return 6;
         if ((active0 & 0x20400000L) != 0L)
         {
            jjmatchedKind = 39;
            return 12;
         }
         return -1;
      case 1:
         if ((active0 & 0x100d1b80000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
            return 101;
         }
         if ((active0 & 0x400000L) != 0L)
            return 102;
         if ((active0 & 0x20000000L) != 0L)
            return 101;
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
            return 57;
         }
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 13;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x100000000L) != 0L)
            return 17;
         return -1;
      case 2:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
            return 56;
         }
         if ((active0 & 0x80000L) != 0L)
            return 101;
         if ((active0 & 0x100d1b00000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
            return 101;
         }
         return -1;
      case 3:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 3;
            }
            return 55;
         }
         if ((active0 & 0x10011300000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 3;
            }
            return 101;
         }
         if ((active0 & 0xc0800000L) != 0L)
            return 101;
         return -1;
      case 4:
         if ((active0 & 0x10000300000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
            return 101;
         }
         if ((active0 & 0x11000000L) != 0L)
            return 101;
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
            return 54;
         }
         return -1;
      case 5:
         if ((active0 & 0x100000L) != 0L)
            return 101;
         if ((active0 & 0x10000200000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
            return 101;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
            return 53;
         }
         return -1;
      case 6:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 6;
            return 52;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x200000L) != 0L)
            return 101;
         return -1;
      case 7:
         if ((active0 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 6;
            }
            return 51;
         }
         return -1;
      case 8:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x4000000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 39;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 34:
         return jjStartNfaWithStates_0(0, 9, 31);
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 5);
      case 43:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 58:
         return jjStopAtPos(0, 43);
      case 59:
         return jjStopAtPos(0, 33);
      case 61:
         return jjStartNfaWithStates_0(0, 34, 6);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 91:
         return jjStopAtPos(0, 7);
      case 93:
         return jjStopAtPos(0, 8);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100200000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc0000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20400000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 123:
         return jjStopAtPos(0, 41);
      case 125:
         return jjStopAtPos(0, 42);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 43:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 45:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000200000L);
      case 102:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(1, 29, 101);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000000L);
      case 110:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 102);
         break;
      case 111:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 17);
         return jjMoveStringLiteralDfa2_0(active0, 0x4080000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x10100000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 101);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0800000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1200000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 101);
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 101);
         break;
      case 107:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 101);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 101);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4200000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000L);
      case 102:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 30);
         break;
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 48:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 59:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(8, 40);
         break;
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(17, 26);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 101;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 56:
               case 41:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 53:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 35)
                        kind = 35;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0xac0000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 34)
                     { jjCheckNAdd(31); }
                  else if (curChar == 33)
                     { jjCheckNAdd(6); }
                  else if (curChar == 61)
                     { jjCheckNAdd(6); }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if (curChar == 60)
                     { jjCheckNAdd(6); }
                  else if (curChar == 62)
                     { jjCheckNAdd(6); }
                  break;
               case 58:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 55:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 17:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 57:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 85:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 18:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 101:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 102:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 92:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 52:
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 62;
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 12:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 22:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 28:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 54:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 1:
                  if (curChar == 38 && kind > 14)
                     kind = 14;
                  break;
               case 2:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 5:
                  if ((0x5000000000000000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 6:
                  if (curChar == 61 && kind > 15)
                     kind = 15;
                  break;
               case 7:
                  if (curChar == 62)
                     { jjCheckNAdd(6); }
                  break;
               case 8:
                  if (curChar == 60)
                     { jjCheckNAdd(6); }
                  break;
               case 9:
                  if (curChar == 61)
                     { jjCheckNAdd(6); }
                  break;
               case 10:
                  if (curChar == 33)
                     { jjCheckNAdd(6); }
                  break;
               case 30:
                  if (curChar == 34)
                     { jjCheckNAdd(31); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 33:
                  if ((0x8400700100000000L & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 34:
                  if (curChar == 34 && kind > 37)
                     kind = 37;
                  break;
               case 63:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 79:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  { jjCheckNAdd(97); }
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(98, 99); }
                  break;
               case 99:
                  if (curChar != 46)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(100); }
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  { jjCheckNAdd(100); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 66;
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 63;
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAdd(40); }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 102)
                     { jjAddStates(7, 8); }
                  else if (curChar == 99)
                     { jjAddStates(9, 10); }
                  else if (curChar == 67)
                     { jjAddStates(11, 12); }
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 68;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 65;
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 51:
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 61;
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 67;
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 87;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 101:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  break;
               case 102:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 116)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  break;
               case 92:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 94;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 110)
                     { jjCheckNAdd(11); }
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAdd(41); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 39)
                        kind = 39;
                     { jjCheckNAddTwoStates(40, 41); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 64;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 3:
                  if (curChar == 124 && kind > 14)
                     kind = 14;
                  break;
               case 4:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 11:
                  if (curChar == 116 && kind > 27)
                     kind = 27;
                  break;
               case 13:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 101 && kind > 27)
                     kind = 27;
                  break;
               case 15:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 108 && kind > 27)
                     kind = 27;
                  break;
               case 21:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 103 && kind > 27)
                     kind = 27;
                  break;
               case 25:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 33:
                  if (curChar == 95)
                     { jjCheckNAddStates(3, 6); }
                  break;
               case 35:
                  if (curChar == 101 && kind > 38)
                     kind = 38;
                  break;
               case 36:
                  if (curChar == 117)
                     { jjCheckNAdd(35); }
                  break;
               case 37:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 95)
                     { jjCheckNAdd(40); }
                  break;
               case 40:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAdd(41); }
                  break;
               case 42:
                  if (curChar == 67)
                     { jjAddStates(11, 12); }
                  break;
               case 43:
                  if (curChar == 101 && kind > 25)
                     kind = 25;
                  break;
               case 44:
               case 71:
                  if (curChar == 110)
                     { jjCheckNAdd(43); }
                  break;
               case 45:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 59:
                  if (curChar == 116)
                     { jjCheckNAdd(43); }
                  break;
               case 60:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 64:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 99)
                     { jjAddStates(9, 10); }
                  break;
               case 72:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 80:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 86:
                  if (curChar == 114 && kind > 27)
                     kind = 27;
                  break;
               case 87:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 102)
                     { jjAddStates(7, 8); }
                  break;
               case 90:
                  if (curChar == 97)
                     { jjCheckNAdd(11); }
                  break;
               case 91:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 93:
                  if (curChar == 115)
                     { jjCheckNAdd(35); }
                  break;
               case 94:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 101 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\51", "\50", "\133", "\135", "\42", "\53\53", 
"\53", "\55\55", null, null, null, null, null, null, "\146\157\162", 
"\163\167\151\164\143\150", "\144\145\146\141\165\154\164", "\151\156", "\143\141\163\145", 
"\142\162\145\141\153", null, "\103\157\156\163\157\154\145\56\122\145\141\144\114\151\156\145\50\51", 
null, "\167\150\151\154\145", "\151\146", "\145\154\163\145\40\151\146", 
"\145\154\163\145", "\144\157", "\73", "\75", null, null, null, null, null, 
"\162\145\164\165\162\156\40\60\73", "\173", "\175", "\72", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   97, 98, 99, 31, 32, 33, 34, 92, 95, 85, 88, 58, 69, 
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public testTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public testTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 101; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffff8ffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[101];
    static private final int[] jjstateSet = new int[2 * 101];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
